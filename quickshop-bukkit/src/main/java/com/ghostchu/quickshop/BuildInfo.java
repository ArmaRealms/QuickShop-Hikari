package com.ghostchu.quickshop;

import lombok.Data;
import lombok.SneakyThrows;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.InputStream;
import java.util.Objects;
import java.util.Properties;

/**
 * BuildInfo is utilities to help read BUILDINFO file that generated by CodeMC Jenkins.
 *
 * @author Ghost_chu
 */
@Data
public class BuildInfo {
    private final GitInfo gitInfo;
    private final JenkinsInfo ciInfo;

    @SneakyThrows
    public BuildInfo(@Nullable InputStream inputStream) {
        // Read InputStream to String as UTF-8 encoding with Reader
        if (inputStream == null) {
            gitInfo = new GitInfo(new Properties());
            ciInfo = new JenkinsInfo(new Properties());
            return;
        }
        Properties properties = new Properties();
        properties.load(inputStream);
        this.gitInfo = new GitInfo(properties);
        this.ciInfo = new JenkinsInfo(properties);
    }

    public static class GitInfo {
        @Nullable
        private final String branch;
        private final boolean dirty;
        @Nullable
        private final String remoteOriginUrl;
        @Nullable
        private final String id;
        @Nullable
        private final String abbrev;
        @Nullable
        private final String describe;
        @Nullable
        private final String describeShort;
        @Nullable
        private final String commitUsername;
        @Nullable
        private final String commitEmail;
        @Nullable
        private final String commitMessage;
        @Nullable
        private final String commitDate;
        @Nullable
        private final String buildTime;
        @Nullable
        private final String buildVersion;
        @Nullable
        private final String buildNumber;
        @Nullable
        private final String tags;

        public GitInfo(@NotNull Properties properties) {
            this.tags = properties.getProperty("git.tags");
            this.branch = properties.getProperty("git.branch");
            this.dirty = "true".equalsIgnoreCase(properties.getProperty("git.dirty"));
            this.remoteOriginUrl = properties.getProperty("git.remote.origin.url");
            this.id = properties.getProperty("git.commit.id");
            this.abbrev = properties.getProperty("git.commit.id.abbrev");
            this.describe = properties.getProperty("git.commit.id.describe");
            this.describeShort = properties.getProperty("git.commit.id.describe-short");
            this.commitUsername = properties.getProperty("git.commit.user.name");
            this.commitEmail = properties.getProperty("git.commit.user.email");
            this.commitMessage = properties.getProperty("git.commit.message.short");
            this.commitDate = properties.getProperty("git.commit.time");
            this.buildTime = properties.getProperty("git.build.time");
            this.buildVersion = properties.getProperty("git.build.version");
            this.buildNumber = properties.getProperty("git.build.number");
        }

        @NotNull
        public String getAbbrev() {
            if (abbrev == null) {
                return "undefined";
            }
            return abbrev;
        }

        @NotNull
        public String getBranch() {
            if (branch == null) {
                return "undefined";
            }
            return branch;
        }

        @NotNull
        public String getBuildNumber() {
            return Objects.requireNonNullElse(buildNumber, "undefined");
        }

        @NotNull
        public String getBuildTime() {
            return Objects.requireNonNullElse(buildTime, "undefined");
        }

        @NotNull
        public String getBuildVersion() {
            return Objects.requireNonNullElse(buildVersion, "undefined");
        }

        @NotNull
        public String getCommitDate() {
            return Objects.requireNonNullElse(commitDate, "undefined");
        }

        @NotNull
        public String getCommitEmail() {
            return Objects.requireNonNullElse(commitEmail, "undefined");
        }

        @NotNull
        public String getCommitMessage() {
            return Objects.requireNonNullElse(commitMessage, "undefined");
        }

        @NotNull
        public String getCommitUsername() {
            return Objects.requireNonNullElse(commitUsername, "undefined");
        }

        @NotNull
        public String getDescribe() {
            return Objects.requireNonNullElse(describe, "undefined");
        }

        @NotNull
        public String getDescribeShort() {
            return Objects.requireNonNullElse(describeShort, "undefined");
        }

        @NotNull
        public String getId() {
            if (id == null) {
                return "undefined";
            }
            return id;
        }

        @NotNull
        public String getRemoteOriginUrl() {
            return Objects.requireNonNullElse(remoteOriginUrl, "undefined");
        }

        @NotNull
        public String getTags() {
            if (tags == null) {
                return "undefined";
            }
            return tags;
        }

        public boolean isDirty() {
            return dirty;
        }
    }

    public static class JenkinsInfo {
        private final boolean ci;
        private final int id;
        @Nullable
        private final String idName;
        @Nullable
        private final String tag;
        @Nullable
        private final String url;
        @Nullable
        private final String projectName;
        @Nullable
        private final String projectUrl;
        @Nullable
        private final String projectBaseName;


        public JenkinsInfo(@NotNull Properties properties) {
            this.ci = "true".equalsIgnoreCase(properties.getProperty("jenkins.ci"));
            String idStr = properties.getProperty("ci.build.id");
            if (idStr != null) {
                int fid = -1;
                try {
                    fid = Integer.parseInt(properties.getProperty("ci.build.id"));
                } catch (NumberFormatException ignored) {
                } finally {
                    this.id = fid;
                }
            } else {
                this.id = -1;
            }
            this.idName = properties.getProperty("ci.build.name");
            this.tag = properties.getProperty("ci.build.tag");
            this.url = properties.getProperty("ci.build.url");
            this.projectName = properties.getProperty("ci.job.name");
            this.projectUrl = properties.getProperty("ci.job.url");
            this.projectBaseName = properties.getProperty("ci.job.base_name");
        }

        public int getId() {
            return id;
        }

        @NotNull
        public String getIdName() {
            if (idName == null) {
                return "undefined";
            }
            return idName;
        }

        @NotNull
        public String getProjectBaseName() {
            return Objects.requireNonNullElse(projectBaseName, "undefined");
        }

        @NotNull
        public String getProjectName() {
            return Objects.requireNonNullElse(projectName, "undefined");
        }

        @NotNull
        public String getProjectUrl() {
            return Objects.requireNonNullElse(projectUrl, "undefined");
        }

        @NotNull
        public String getTag() {
            if (tag == null) {
                return "undefined";
            }
            return tag;
        }

        @NotNull
        public String getUrl() {
            if (url == null) {
                return "undefined";
            }
            return url;
        }

        public boolean isCi() {
            return ci;
        }
    }

}
